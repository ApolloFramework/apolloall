##########
#
# File:    fqdn.sh
#
# Purpose: Set the fully qualified domain name for systems that
#          do not return this from hostname or hostname -f.  This
#          can set FQHOSTNAME, FQMAILHOST, DOMAINNAME, RUNNRSYSTEM
#
# Version: $Id: bilderrc 93 2012-07-20 16:55:01Z cary $
#
##########

#
#  Auxiliary function to correct some hostnames
#
txcorpFqdn() {
  local fqdn
  if ! fqdn=`hostname -f 2>/dev/null`; then
    fqdn=`hostname`
  fi
  # Add cases here
}
txcorpFqdn

# Try directly downloading numpkgs, instead of checking out via svn
case $USER in
  *) PACKAGE_REPOS_FILE=${PACKAGE_REPOS_FILE:-"$BILDER_CONFDIR/numpkgsdirect.txt"};;
esac

# File containing list of package repos

#
# Hook for getting any auxiliary data.  For Tech-X, this
# gets the results data.  This is called at preconfig time.
# The data is always updated as before.
#
# Args:
# 1: The name of the package
#
# Named args
#
bilderGetAuxData() {

# techo "bilderGetAuxData called with $*."

# Get options
  local svnupresults=true  # Always true
  while test -n "$1"; do
    case "$1" in
      -u) svnupresults=true;;
      *)  break;;
    esac
    shift
  done

# Get the base name (e.g., vpresults) of the auxiliary data
  local repo=$1
  local auxdatavar=`genbashvar $repo`_AUXDATA
  local auxdataval=`deref $auxdatavar`
  if test -z "$auxdataval"; then
    techo "$auxdatavar is empty.  No data to get."
    return
  fi
# techo "auxdataval = $auxdataval."

# Determine the suffix
  local auxdirsfx=${RESULTS_DIRSFX}
  techo "Before generating, auxdirsfx = $auxdirsfx."
  local machinefilesfx=`echo $MACHINE_FILE | sed -e 's/^.*\.//'`
  if test -z "$auxdirsfx"; then
    case `uname` in
      CYGWIN*WOW64*) auxdirsfx=win64-${machinefilesfx};;
            CYGWIN*) auxdirsfx=win32-${machinefilesfx};;
      Darwin)
        case `uname -r` in
          10.*) auxdirsfx=snowleopard;;
          11.*) auxdirsfx=lion;;
        esac
        ;;
      *) auxdirsfx=${UQMAILHOST};;
    esac
  fi
  techo "After generating, auxdirsfx = $auxdirsfx."
  if test ${CMAKE_BUILD_TYPE} = ReleaseWithDebInfo; then
    auxdirsfx=${auxdirsfx}-rwdi
  fi
# techo "auxdirsfx = $auxdirsfx."

# See if data is already there
  cd $PROJECT_DIR/$1
  local auxdatadir=
  if test -d ${auxdataval}-${auxdirsfx}; then
    auxdatadir=${auxdataval}-${auxdirsfx}
  elif test -d ${auxdataval}; then
    auxdatadir=${auxdataval}
  fi
# techo "auxdatadir = $auxdatadir."
# techo "svnupresults = $svnupresults."

# If data present, update it as requested
  local cmd=
  local res=
  if test -n "$auxdatadir"; then
    techo "Found auxdatadir = $auxdatadir."
    local repodir=`pwd -P`
    if $svnupresults; then
      techo "Updating $auxdatadir."
      cmd="bilderSvn up $auxdatadir"
      techo "$cmd"
      $cmd
      res=$?
      if test $res != 0; then
        techo "WARNING: User $USER not able to update results.  Results not updated."
      fi
    else
      techo "Not updating $auxdatadir."
      res=0
    fi
    if test -f $auxdatadir/svninfo.txt; then
      if svn info $auxdatadir/svninfo.txt 1>/dev/null 2>&1; then
        techo "WARNING: $auxdatadir/svninfo.txt should not be in svn.  Please svn rm it."
      fi
    fi
    techo "Before getVersion, pwd = `pwd -P`.  Returning to $repodir."
    cd $repodir
    getVersion $auxdatadir
    local auxdatabase=`basename $auxdatadir`
    local vervar=`genbashvar $auxdatabase`_BLDRVERSION
    local verval=`deref $vervar`
    techo "$vervar = $verval"
    case "$verval" in
      *M)
        techo "WARNING: Auxiliary data, $auxdatadir, has local modifications.  Do you need to commit?"
        ;;
      "")
        techo "WARNING: version is empty.  Current directory is `pwd -P`."
        ;;
      *)
        local svnst=`(cd $repodir/$auxdatadir; svn st --ignore-externals | grep -v ^X)`
        if test -n "$svnst"; then
          techo "WARNING: Auxiliary data, $auxdatadir, has extra files or local modifications."
# techo "WARNING: $svnst"
          techo "WARNING: Please fix ignores or files."
        fi
        ;;
    esac
    return $res
  fi

# Not found, go hunting for a results repo that matches
  techo "auxdatadir not found.  Will try to check out."
  local baseurl=https://ice.txcorp.com/svnrepos/results
# techo "bilderSvn ls $baseurl/$auxdataval/trunk"
  cmd="bilderSvn ls $baseurl/$auxdataval/trunk | sed 's%/\$%%' | grep $auxdirsfx"
  techo "$cmd"
  eval "$cmd" >bildercands.txt
  res=$?
  techo "res = $res.  bildercands.txt ="
  cat bildercands | tee -a $LOGFILE
  if test $res != 0 -o ! -s bildercands.txt; then
    techo "Cannot list $baseurl/$auxdataval/trunk.  Giving up."
    return 1
  fi

  local matches=`wc -l bildercands.txt 2>/dev/null | sed -e 's/^ *//' -e 's/ .*$//'`
  techo "Found $matches matches."
  if test "$matches" = 0; then
    techo "WARNING: No suitable candidate matching ${auxdataval} found for the auxiliary data for $1.  Returning."
    res=1
  elif grep -q "^${auxdirsfx}\$" bildercands.txt; then
    techo "WARNING: Found precise match, ${auxdirsfx}, for auxiliary data.  Will check out in `pwd -P`."
    cmd="bilderSvn co $baseurl/$auxdataval/trunk/${auxdirsfx} ${auxdataval}-${auxdirsfx}"
    res=$?
  else
    cands=`cat bildercands.txt`
    techo "WARNING: Found candidate(s), $cands, in $baseurl/$auxdataval/trunk.  No exact match.  Consider copying one of these to $baseurl/$auxdataval/trunk/${auxdirsfx} and deleting the currently existing ones."
    res=1
  fi
  rm bildercands.txt

  return $res

}

#
# Hook for any final actions.
#
# Args:
#
# Named args:
#
bilderFinalAction() {

# Post to orbiter.  Follow falsification.
  DO_ORBITER_POST=${DO_ORBITER_POST:-"false"}
  if $DO_ORBITER_POST; then
    if $NOBUILD; then
      techo "Not posting as nothing built."
      return
    fi
# Post only not "all up to date"
    if echo "$EMAIL_SUBJECT" | grep -q "all up to date"; then
      techo "Not posting as all up to date."
      return
    fi
# Post only if posting software present.
    if  test ! -f $BILDER_CONFDIR/orbcred/PostBilderToOrbiter.py; then
      techo "Not posting as posting software not present"
      return
    fi
# Determine whether to post
    if ! grep -q "^$USER$" $BILDER_CONFDIR/orbcred/orbiterusers.txt; then
      techo "$USER not posting."
      return
    fi
# Line must start with name, then whitespace, then the host name
# then whitespace, with possible hash, after which rest does not matter
    local hostcand=`grep $BLDRHOSTID $BILDER_CONFDIR/orbcred/orbiterhosts.txt | sed -e 's/^[ \t]*//' -e 's/#.*$//' -e 's/[ \t]*$//'`
    if test "$hostcand" != "$BLDRHOSTID"; then
      techo "Not posting from $BLDRHOSTID."
      return
    fi
    if ! grep -q "^$ORBITER_NAME$" $BILDER_CONFDIR/orbcred/orbiternames.txt; then
      techo "Not posting project, $ORBITER_NAME."
      return
    fi

    techo "Posting results."
    cd $PROJECT_DIR
    local orbbuilddir=${BUILD_DIR}
    local orblogdir=${BILDER_LOGDIR}
    case `uname` in
      CYGWIN*)
        orbbuilddir=`cygpath -w ${orbbuilddir}`
        orblogdir=`cygpath -w ${orblogdir}`
        ;;
    esac
    local postbilder=$BILDER_CONFDIR/orbcred/PostBilderToOrbiter.py
    case `uname` in
      CYGWIN*)
        postbilder=`cygpath -aw $postbilder`
        ;;
    esac
    ORBITER_LOG=$BILDER_LOGDIR/PostBilderToOrbiter.log
    rotateFile $ORBITER_LOG
    cmd="python '${postbilder}' --builddir='${orbbuilddir}' --bilderchain=$BILDER_CHAIN --logdir='${orblogdir}' --bildername=$BILDER_NAME --systemname=$RUNNRSYSTEM ${ORBITER_NAME}"
    techo "$cmd" | tee -a $ORBITER_LOG
    eval "$cmd" 1>>$ORBITER_LOG 2>&1
    res=$?
    if test $res = 0; then
      if test -n "$BILDER_DASHBOARD_URL"; then
        echo "More complete logs are at $BILDER_DASHBOARD_URL."
        echo ""
      fi
    else
      techo "WARNING: PostBilderToOrbiter.py failed.  Check $ORBITER_LOG."
    fi
  fi

}

# Sign an installer using Microsoft signtool.
# Only to be called for Windows, of course.
#
# args
# 1: Product name
# 2: Product version
# 3: executable to be signed
#
signInstallerOFF() {

# Relies on signTool being in a standard location, as below.
  local signTool="/cygdrive/c/Program Files/Microsoft SDKs/Windows/v6.0A/bin/sig
ntool.exe"

# Am confused here, signing one product or two, which config.txt?
  local configure_txt=$FQMAILHOST-$1-ser-config.txt
# In order to get product name and version, we grep them out of config.txt.
# Is there a better way?
  local product=`grep -i "$1_ENGINE = " $configure_txt | sed -e 's/.*= //' -e 's
/\.$//'`
  local version=`grep '^-- ENGINE_VERSION' $configure_txt | sed 's/.*= //'`
  if test -x "$signTool"; then
    "$signTool" sign /d "$product $version installer" \
        /du "!http://www.txcorp.com/products/$suffix" \
        /t "http://timestamp.verisign.com/scripts/timestamp.dll" $3
  else
    techo "WARNING: Cannot find signtool to sign $3."
  fi
}

